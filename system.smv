
------------------------------------- Bus ------------------------------------
MODULE Bus
VAR
  -------------- bus out data --------------
  AD:      {0,1}; -- address
  DT:      boolean; -- data if CTRL is write
  CTRL:    {read, write};
  valid:   boolean; -- data on the bus is valid
  -------------- arbitre data --------------
  arb_gnt: {none, l1_1, l1_2, mem}; -- arbitre decision

  ------------- computed state -------------
  is_valid_mem:  boolean;
  is_valid_cache: boolean;

ASSIGN
  is_valid_mem := arb_gnt = mem & valid;
  is_valid_cache := valid & (arb_gnt = l1_1 | arb_gnt = l1_2);

----------------------------------- Memory -----------------------------------
MODULE Memory(bus)
VAR
  ------------- internal values ------------
  data: array 0..1 of boolean; -- internal data
  --------------- out values ---------------
  AD:    {0,1}; -- requested adress
  DT:    boolean; -- response to bus
  CTRL:  {read, write};
  valid: boolean; -- if data is valid

ASSIGN
  init(data[0]) := FALSE;
  init(data[1]) := TRUE;
  init(AD)      := 0;
  init(DT)      := FALSE;
  init(CTRL)    := read;
  init(valid)   := FALSE;

  ------------- internal values ------------
  next(data[0]) :=
    case
      bus.is_valid_cache & bus.CTRL = write & bus.AD = 0: bus.DT;
      TRUE:                                               data[0];
    esac;
  next(data[1]) :=
    case
      bus.is_valid_cache & bus.CTRL = write & bus.AD = 1: bus.DT;
      TRUE:                                               data[1];
    esac;
  --------------- out values ---------------
  next(AD) :=
    case
      bus.valid: bus.AD;
      TRUE: AD;
    esac;
  next(DT) :=
    case
      bus.valid & bus.CTRL = read: data[bus.AD];
      bus.valid & bus.CTRL = write: bus.DT; -- keep write data from bus in bus out
      TRUE: DT;
    esac;
  next(CTRL) :=
    case
      bus.valid: bus.CTRL;
      TRUE: CTRL;
    esac;
  next(valid) :=
    case
      bus.arb_gnt = mem & bus.DT = DT: TRUE; -- if bus out data is mem data, then valid is TRUE
      TRUE:                            FALSE; -- else valid is false
    esac;

------------------------------------ Cache -----------------------------------
MODULE Cache(bus, processor, id)
VAR
  ------------- internal values ------------
  TAG: {NULL,0,1}; -- cached value tag
  REG: boolean; -- cached value
  ------------- bus out values -------------
  AD:   {0,1}; -- address
  DT:   boolean; -- data if CTRL is write
  CTRL: {read, write};
  valid:boolean; -- if data is valid
  ------------- arb out values -------------
  req:  boolean; -- cache request for bus

  ------------- Computed state -------------
  is_our_request: boolean;
  is_our_response: boolean;
  is_load_response: boolean;
  is_load_in_cache: boolean;

ASSIGN
  is_our_request := bus.AD = AD & bus.CTRL = CTRL;
  is_our_response := req = TRUE & bus.is_valid_mem & is_our_request;
  is_load_response := processor.req = load & is_our_response;
  is_load_in_cache := processor.req = load & processor.AD = TAG;

  init(TAG)  := NULL;
  init(DT)   := FALSE;
  init(CTRL) := read;
  init(req)  := FALSE;

  ------------- internal values ------------
  next(TAG) :=
    case
      is_load_response: bus.AD; -- fill cache TAG if the requested data is on the bus
      TRUE: TAG; -- keep cache in any other configuration
    esac;
  next(REG) :=
    case
      is_load_response: bus.DT; -- fill cache REG if the requested data is on the bus
      bus.CTRL = write & bus.AD = TAG & bus.is_valid_mem: bus.DT; -- SNOOP, fill data if it is the one written on the bus
      TRUE: REG;
    esac;

  ------------- proc out values ------------
  processor.DT := REG; -- proc out data is data taken from register
  next(processor.valid) :=
    case
      processor.valid: FALSE; -- always stay valid 1 cycle only
      is_our_response : TRUE; -- proc out is valid after the data on the bus is our response
      is_load_in_cache: TRUE; --                         the data in cache is the required one
      TRUE:             FALSE; -- default is not valid
    esac;
  ------------- bus out values -------------
  AD := processor.AD;
  valid := bus.arb_gnt = id & req;
  next(DT) :=
    case
      is_load_response: bus.DT;
      processor.req = store: processor.REG;
      TRUE: DT;
    esac;
  next(CTRL) :=
    case
      processor.req = load: read;
      processor.req = store: write;
      TRUE: CTRL;
    esac;
  next(req) :=
    case
      is_our_response :      FALSE;
      processor.req != idle & !processor.valid & !is_load_in_cache: TRUE;
      TRUE:                  req;
    esac;

---------------------------------- Processor ---------------------------------
MODULE Processor
VAR
  ------------- cache out values -----------
  req:   {idle, load, store}; -- processor request to cache
  AD:    {0,1}; -- requested address
  ------------- internal values ------------
  REG:   boolean; -- proc data
  ------------- cache in values ------------
  DT:    boolean; -- data from l1
  valid: boolean; -- if data is valid

ASSIGN
  init(AD)    := 0;
  init(REG)   := FALSE;
  init(valid) := FALSE;

  ------------- cache out values -----------
  next(req) :=
    case
      valid: {idle, load, store};
      req = idle: {idle, load, store};
      TRUE: req;
    esac;
  next(AD) :=
    case
      valid: {0,1};
      TRUE: AD;
    esac;
  ------------- internal values ------------
  next(REG) :=
    case
      valid: {TRUE,FALSE};
      TRUE: REG;
    esac;

------------------------------------ Main ------------------------------------
MODULE main
VAR
  bus: Bus;
  p1: Processor;
  p2: Processor;
  c1: Cache(bus, p1, l1_1);
  c2: Cache(bus, p2, l1_2);
  memory: Memory(bus);

ASSIGN
  -------------- init values ---------------
  init(bus.arb_gnt) := none;

  -------------- bus arbitre ---------------
  next(bus.arb_gnt) :=
    case
      c1.req & (bus.is_valid_mem | bus.arb_gnt = none) : l1_1; -- if mem data is valid on the bus, then next master is l1_1
      c2.req & (bus.is_valid_mem | bus.arb_gnt = none) : l1_2; -- if mem data is valid on the bus, then next master is l1_2
      bus.is_valid_cache | bus.arb_gnt = mem:            mem; -- if cache made a request, then next master is mem
      TRUE:                                              none; -- default bus master is none
    esac;

  ------------- bus out values -------------
  bus.AD :=
    case
      bus.arb_gnt = l1_1: c1.AD;
      bus.arb_gnt = l1_2: c2.AD;
      TRUE: memory.AD;
    esac;
  bus.DT :=
    case
      bus.arb_gnt = l1_1: c1.DT;
      bus.arb_gnt = l1_2: c2.DT;
      TRUE: memory.DT;
    esac;
  bus.CTRL :=
    case
      bus.arb_gnt = l1_1: c1.CTRL;
      bus.arb_gnt = l1_2: c2.CTRL;
      TRUE: memory.CTRL;
    esac;
  bus.valid :=
    case
      bus.arb_gnt = l1_1: c1.valid;
      bus.arb_gnt = l1_2: c2.valid;
      TRUE: memory.valid;
    esac;

--------------------------- Specifications ---------------------------
 -- there is a branch where mem is infinitely often the master
-- SPEC EG EF(bus.arb_gnt = mem)
 -- there is a branch where l1_1 is infinitely often the master
-- SPEC EG EF(bus.arb_gnt = l1_1)


----------------- bus --------------------
-- if l1_1 is bus master, then bus out must be l1_in --
SPEC AG ( (bus.arb_gnt = l1_1) -> (bus.AD = c1.AD & bus.DT = c1.DT & bus.CTRL = c1.CTRL & bus.valid = c1.valid) )
-- if mem is bus master, then bus out must be mem_in --
SPEC AG ( (bus.arb_gnt = mem) -> (bus.AD = memory.AD & bus.DT = memory.DT & bus.valid = memory.valid) )
-- if bus is l1_1 then it should also be valid (not yes respected) --
-- SPEC AG ( (bus.arb_gnt = l1_1) -> (bus.valid) )

---------------- c1 -------------------
-- if l1_1 reads data, then next value in bus is the requested value and memory response takes 2 cycles --
SPEC AG ( (bus.valid & bus.arb_gnt = l1_1 & bus.CTRL = read) -> AX AX (bus.DT = memory.data[c1.AD] & memory.valid) )
SPEC EG EF(bus.valid & bus.arb_gnt = l1_1 & bus.CTRL = read)
-- if l1_1 writes data, then next value in memory is the written value and memory response takes 2 cycles --
SPEC AG ( (bus.valid & bus.arb_gnt = l1_1 & bus.CTRL = write) -> AX AX (memory.data[c1.AD] = c1.DT & memory.valid) )
SPEC EG EF(bus.valid & bus.arb_gnt = l1_1 & bus.CTRL = write)
-- if proc reads data present in c1, then response should be the value of the c1 register and should be next cycle --
SPEC AG ( (p1.req = load & p1.AD = c1.TAG & !p1.valid) -> AX (p1.DT = c1.REG & p1.valid) )
SPEC EG EF(p1.req = load & p1.AD = c1.TAG & !p1.valid)

-------------- p1 -----------------
-- SPEC EG EF(p1.valid & p1.req != idle)
-- if proc read a data, the the read value must be the same as the one in memory --
SPEC AG ( (p1.valid & p1.req = load) -> (p1.DT = memory.data[p1.AD]) )
-- if proc read a data, the the read value must be the same as the one in memory --
SPEC AG ( (p1.valid & p1.req = store) -> (p1.REG = memory.data[p1.AD]) )
-- p1 can quit idle req state --
SPEC AG ( (p1.req = idle) -> EF (p1.req != idle) )
-- p1 can quit load req state --
SPEC AG ( (p1.req = load) -> EF (p1.req != load) )
-- p1 can quit store req state --
SPEC AG ( (p1.req = store) -> EF (p1.req != store) )

---------------- other -------------------
-- verify that there are branches whith these cases --
-- SPEC EG EF(memory.data[0] = TRUE)
-- SPEC EG EF(memory.data[0] = FALSE)
-- SPEC EG EF(memory.data[1] = TRUE)
-- SPEC EG EF(memory.data[1] = FALSE)
-- SPEC EG EF(c1.AD = 0 & c1.CTRL = read)
-- SPEC EG EF(c1.AD = 1 & c1.CTRL = read)
-- SPEC EG EF(c1.AD = 0 & c1.CTRL = write)
-- SPEC EG EF(c1.AD = 1 & c1.CTRL = write)
-- SPEC EG EF(c1.is_our_response)
-- SPEC EG EF(p1.AD = 0 & p1.req = load & p1.REG = TRUE)
-- SPEC EG EF(p1.AD = 1 & p1.req = load & p1.REG = TRUE)
-- SPEC EG EF(p1.AD = 0 & p1.req = store & p1.REG = TRUE)
-- SPEC EG EF(p1.AD = 1 & p1.req = store & p1.REG = TRUE)
-- SPEC EG EF(p1.AD = 0 & p1.req = load & p1.REG = FALSE)
-- SPEC EG EF(p1.AD = 1 & p1.req = load & p1.REG = FALSE)
-- SPEC EG EF(p1.AD = 0 & p1.req = store & p1.REG = FALSE)
-- SPEC EG EF(p1.AD = 1 & p1.req = store & p1.REG = FALSE)

